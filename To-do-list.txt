import tkinter as tk
from tkinter import messagebox

root = tk.Tk()
root.title("To-Do List")

# Function to add a new task with priority color coding
def add_task():
    task = task_entry.get()
    priority = priority_var.get()
    if task:
        if priority == "High":
            tasks.insert(tk.END, f"[High] {task}")
            tasks.itemconfig(tk.END, {'fg': 'red'})  # High priority in red
        elif priority == "Medium":
            tasks.insert(tk.END, f"[Medium] {task}")
            tasks.itemconfig(tk.END, {'fg': 'orange'})  # Medium priority in orange
        else:
            tasks.insert(tk.END, f"[Low] {task}")
            tasks.itemconfig(tk.END, {'fg': 'green'})  # Low priority in green
        task_entry.delete(0, tk.END)
    else:
        messagebox.showwarning("Warning", "You must enter a task.")

# Function to remove the selected task
def remove_task():
    try:
        task_index = tasks.curselection()[0]
        tasks.delete(task_index)
    except IndexError:
        messagebox.showwarning("Warning", "You must select a task to remove.")

# Function to mark a selected task as done
def mark_task():
    try:
        task_index = tasks.curselection()[0]
        task = tasks.get(task_index)
        tasks.delete(task_index)
        tasks.insert(task_index, task + " âœ”")  # Add checkmark
        tasks.itemconfig(task_index, {'fg': 'gray'})  # Change color to gray
    except IndexError:
        messagebox.showwarning("Warning", "You must select a task to mark as done.")

# Function to edit a selected task
def edit_task():
    try:
        task_index = tasks.curselection()[0]
        task = tasks.get(task_index)
        task_entry.delete(0, tk.END)
        task_entry.insert(tk.END, task)
        tasks.delete(task_index)
    except IndexError:
        messagebox.showwarning("Warning", "You must select a task to edit.")

# Function to save tasks to a file
def save_tasks():
    with open("tasks.txt", "w") as file:
        for task in tasks.get(0, tk.END):
            file.write(task + "\n")
    messagebox.showinfo("Info", "Tasks saved successfully.")

# Function to load tasks from a file
def load_tasks():
    try:
        with open("tasks.txt", "r") as file:
            for line in file:
                tasks.insert(tk.END, line.strip())
    except FileNotFoundError:
        pass  # If file doesn't exist, ignore and continue

# Function to clear all tasks
def clear_tasks():
    tasks.delete(0, tk.END)

# GUI Setup
tasks = tk.Listbox(root, width=50, height=10)
tasks.pack(pady=10)

task_entry = tk.Entry(root, width=50)
task_entry.pack(pady=10)

priority_var = tk.StringVar(value="Low")  # Default priority
priority_menu = tk.OptionMenu(root, priority_var, "High", "Medium", "Low")
priority_menu.pack(pady=5)

add_button = tk.Button(root, text="Add Task", command=add_task)
add_button.pack(pady=5)

remove_button = tk.Button(root, text="Remove Task", command=remove_task)
remove_button.pack(pady=5)

mark_button = tk.Button(root, text="Mark as Done", command=mark_task)
mark_button.pack(pady=5)

edit_button = tk.Button(root, text="Edit Task", command=edit_task)
edit_button.pack(pady=5)

save_button = tk.Button(root, text="Save Tasks", command=save_tasks)
save_button.pack(pady=5)

clear_button = tk.Button(root, text="Clear All", command=clear_tasks)
clear_button.pack(pady=5)

# Load tasks on startup
load_tasks()

# Keyboard Shortcuts
root.bind('<Return>', lambda event: add_task())      # Enter key to add task
root.bind('<Delete>', lambda event: remove_task())   # Delete key to remove selected task
root.bind('<Control-d>', lambda event: mark_task())  # Ctrl+D to mark as done

root.mainloop()
